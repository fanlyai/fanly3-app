// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId 
  name            String?
  username        String?   @unique
  bio             String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  credit          Float     @default(0.0)
  subscriberPrice  Float?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  followingIds    String[]  @db.ObjectId
  hasNotification Boolean?
  subscriberIds   String[]  @db.ObjectId

  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  subscribers   Subscriber[]
}

model Media {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  type     String
  path     String
  uniqueId String
}

model Post {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  subcriberPrice Float?
  userId         String    @db.ObjectId
  likedIds       String[]  @db.ObjectId
  subscriberIds  String[]  @db.ObjectId
  user           User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments       Comment[]
  typeId         String?
  mediaId        String?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscriber {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  subscriberId String
  createdAt    DateTime @default(now())
  updatetAt    DateTime @default(now())
  expireDate   DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostType {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  postType String
  postId   String
}
